diff --git a/src/builder/edit_member.rs b/src/builder/edit_member.rs
index 1a28ec91f..a9bf22f29 100644
--- a/src/builder/edit_member.rs
+++ b/src/builder/edit_member.rs
@@ -1,4 +1,5 @@
 use std::collections::HashMap;
+use chrono::{DateTime, Duration, Utc};
 
 use crate::{internal::prelude::*, json::from_number};
 use crate::{
@@ -89,4 +90,26 @@ impl EditMember {
 
         self
     }
+
+    /// Times out a member for a duration
+    ///
+    /// Requires the [Moderate Members] permission.
+    ///
+    /// [Moderate Members]: crate::model::permissions::Permissions::MODERATE_MEMBERS
+    pub fn timeout_for(&mut self, duration: Duration) -> &mut Self {
+        self.0.insert("communication_disabled_until", Value::from((Utc::now() + duration).format("%+").to_string()));
+
+        self
+    }
+
+    /// Times out a member until a time
+    ///
+    /// Requires the [Moderate Members] permission.
+    ///
+    /// [Moderate Members]: crate::model::permissions::Permissions::MODERATE_MEMBERS
+    pub fn timeout_until(&mut self, until: &DateTime<Utc>) -> &mut Self {
+        self.0.insert("communication_disabled_until", Value::from(until.format("%+").to_string()));
+
+        self
+    }
 }
diff --git a/src/model/event.rs b/src/model/event.rs
index 4d9a454ca..65f536102 100644
--- a/src/model/event.rs
+++ b/src/model/event.rs
@@ -389,6 +389,7 @@ pub struct GuildMemberUpdateEvent {
     #[serde(default)]
     pub mute: bool,
     pub avatar: Option<String>,
+    pub communication_disabled_until: Option<DateTime<Utc>>,
 }
 
 #[cfg(feature = "cache")]
@@ -431,6 +432,7 @@ impl CacheUpdate for GuildMemberUpdateEvent {
                     #[cfg(feature = "unstable_discord_api")]
                     permissions: None,
                     avatar: self.avatar.clone(),
+                    communication_disabled_until: self.communication_disabled_until,
                 });
             }
 
@@ -924,6 +926,7 @@ impl CacheUpdate for PresenceUpdateEvent {
                         #[cfg(feature = "unstable_discord_api")]
                         permissions: None,
                         avatar: None,
+                        communication_disabled_until: None,
                     });
                 }
             }
diff --git a/src/model/guild/member.rs b/src/model/guild/member.rs
index 0360df3c7..b801fd558 100644
--- a/src/model/guild/member.rs
+++ b/src/model/guild/member.rs
@@ -57,6 +57,8 @@ pub struct Member {
     pub permissions: Option<Permissions>,
     /// The guild avatar hash
     pub avatar: Option<String>,
+    /// When the user's timeout will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out
+    pub communication_disabled_until: Option<DateTime<Utc>>,
 }
 
 /// Helper for deserialization without a `GuildId` but then later updated to the correct `GuildId`.
@@ -78,6 +80,7 @@ pub(crate) struct InterimMember {
     #[cfg(feature = "unstable_discord_api")]
     pub permissions: Option<Permissions>,
     pub avatar: Option<String>,
+    pub communication_disabled_until: Option<DateTime<Utc>>,
 }
 
 impl From<InterimMember> for Member {
@@ -95,6 +98,7 @@ impl From<InterimMember> for Member {
             #[cfg(feature = "unstable_discord_api")]
             permissions: m.permissions,
             avatar: m.avatar,
+            communication_disabled_until: m.communication_disabled_until,
         }
     }
 }
diff --git a/src/model/permissions.rs b/src/model/permissions.rs
index 19ea70ec1..d818029d7 100644
--- a/src/model/permissions.rs
+++ b/src/model/permissions.rs
@@ -358,6 +358,8 @@ __impl_bitflags! {
         SEND_MESSAGES_IN_THREADS = 1 << 38;
         /// Allows for launching activities in a voice channel
         START_EMBEDDED_ACTIVITIES = 1 << 39;
+        /// Allows for timing out users to prevent them from sending or reacting to messages in chat and threads, and from speaking in voice and stage channels
+        MODERATE_MEMBERS = 1 << 40;
     }
 }
 
@@ -396,7 +398,8 @@ generate_get_permission_names! {
     use_external_stickers: "Use External Stickers",
     use_slash_commands: "Use Slash Commands",
     use_vad: "Use Voice Activity",
-    view_audit_log: "View Audit Log"
+    view_audit_log: "View Audit Log",
+    moderate_members: "Moderate Members"
 }
 
 #[cfg(feature = "model")]
@@ -672,6 +675,14 @@ impl Permissions {
     pub fn use_vad(self) -> bool {
         self.contains(Self::USE_VAD)
     }
+
+    /// Shorthand for checking that the set of permissions contains the
+    /// [Moderate Members] permission.
+    ///
+    /// [Moderate Members]: Self::MODERATE_MEMBERS
+    pub fn moderate_members(self) -> bool {
+        self.contains(Self::USE_SLASH_COMMANDS)
+    }
 }
 
 impl Default for Permissions {
diff --git a/src/model/voice.rs b/src/model/voice.rs
index 5fa7ad5cc..4dbfa610c 100644
--- a/src/model/voice.rs
+++ b/src/model/voice.rs
@@ -108,6 +108,7 @@ impl<'de> Deserialize<'de> for VoiceState {
             #[cfg(feature = "unstable_discord_api")]
             permissions: Option<Permissions>,
             avatar: Option<String>,
+            communication_disabled_until: Option<DateTime<Utc>>,
         }
 
         struct VoiceStateVisitor;
@@ -184,6 +185,7 @@ impl<'de> Deserialize<'de> for VoiceState {
                                     #[cfg(feature = "unstable_discord_api")]
                                     permissions: partial_member.permissions,
                                     avatar: partial_member.avatar,
+                                    communication_disabled_until: partial_member.communication_disabled_until,
                                 });
                             }
                         },
diff --git a/src/model/misc.rs b/src/model/misc.rs
index 8e46e9566..1f1252e3b 100644
--- a/src/model/misc.rs
+++ b/src/model/misc.rs
@@ -474,6 +474,7 @@ mod test {
                 #[cfg(feature = "unstable_discord_api")]
                 permissions: None,
                 avatar: None,
+                communication_disabled_until: None,
             };

             assert_eq!(ChannelId(1).mention().to_string(), "<#1>");
diff --git a/src/utils/mod.rs b/src/utils/mod.rs
index e7803ff6a..ae15c462b 100644
--- a/src/utils/mod.rs
+++ b/src/utils/mod.rs
@@ -867,6 +867,7 @@ mod test {
             #[cfg(feature = "unstable_discord_api")]
             permissions: None,
             avatar: None,
+            communication_disabled_until: None,
         };

         let role = Role {
diff --git a/src/model/guild/mod.rs b/src/model/guild/mod.rs
index 582e8a0c2..776467073 100644
--- a/src/model/guild/mod.rs
+++ b/src/model/guild/mod.rs
@@ -3181,6 +3181,7 @@ mod test {
                 #[cfg(feature = "unstable_discord_api")]
                 permissions: None,
                 avatar: None,
+                communication_disabled_until: None,
             }
         }

